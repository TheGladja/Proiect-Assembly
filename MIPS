.data
	nrNoduri: .space 4
	numarLegaturi: .space 4
	roles: .space 80
	stiva: .space 80
	vizitat: .space 80
	G: .space 1600
	Host1: .space 4
	Host2: .space 4
	userInput: .space 30
	message1: .asciiz "host index "
	message2: .asciiz "switch index "
	message3: .asciiz "switch malitios index "
	message4: .asciiz "controller index "
	newLine: .asciiz "\n"
	newSpace: .asciiz " "
	punctSiVirgula: .asciiz ";"
	douaPuncte: .asciiz ":"
	YES: .asciiz "Yes"
	NO: .asciiz "No"
	CopieS4: .space 4
	PozitiiInapoi: .asciiz "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
.text
	main:

#-------------------------------------------------------------------

			#CITIREA
	
#-------------------------------------------------------------------

	#Citirea numarului de Noduri

	li $v0, 5
	syscall

	sw $v0, nrNoduri

	lw $a1, nrNoduri

#-------------------------------------------------------------------

	#Citirea numarului de Legaturi

	li $v0, 5
	syscall

	sw $v0, numarLegaturi

	lw $a2, numarLegaturi

#-------------------------------------------------------------------

	#Initializarea matricei cu 0
	
	mul $a3, $a1, $a1   # nr de elemente din matrice

	addi $t1, $zero, 0
	addi $t2, $zero, 0
	addi $t3, $zero, 0  # nr 0 care va fi pus in fiecare element din matricea G

	loopMatrice:

	sw $t3, G($t1)

	addi $t1, $t1, 4
	addi $t2, $t2, 1

	blt $t2, $a3, loopMatrice

#------------------------------------------------------------------------------------------------

	#Citirea legaturilor

	addi $t1, $zero, 0
	addi $t2, $zero, 1	# il vom pune in matricea G in functie de legaturile citite
	addi $t3, $zero, 0
	addi $t4, $zero, 0

	loopCitireLegaturi:

	li $v0, 5
	syscall

	move $t3, $v0

	li $v0, 5
	syscall

	move $t4, $v0

	#Unde se va pune valoarea 1 pe prima jumatate a matricei  G = 4 * $a1 * $t3 + 4 * $t4
	mul $s1, $a1, 4
	mul $s1, $s1, $t3
	mul $s2, $t4, 4
	add $s1, $s1, $s2

	sw $t2, G($s1)
	
	#Unde se va pune valoarea 1 pe prima jumatate a matricei  G = 4 * $a1 * $t4 + 4 * $t3

	mul $s1, $a1, 4
	mul $s1, $s1, $t4
	mul $s2, $t3, 4
	add $s1, $s1, $s2

	sw $t2, G($s1)

	addi $t1, $t1, 1

	blt $t1, $a2, loopCitireLegaturi

#-------------------------------------------------------------------

	#Citirea vectorului roles

	addi $t1, $zero, 0
	addi $t2, $zero, 0
	
	loopVector:
	
	li $v0, 5
	syscall

	sw $v0, roles($t1)

	addi $t1, $t1, 4
	addi $t2, $t2, 1

	blt $t2, $a1, loopVector

#-------------------------------------------------------------------

	#Citirea numarului cerintei

	li $v0, 5
	syscall 

	beq $v0, 1, PROBLEMA1
	beq $v0, 2, PROBLEMA2
	beq $v0, 3, PROBLEMA3

#-------------------------------------------------------------------

			#PROBLEMA 1	

#-------------------------------------------------------------------

	PROBLEMA1:

	move $t0, $a1	# numarul de noduri este pus in $t0
	addi $t1, $zero, 0	# va merge din 4 in 4 bytes pentru vectorul roles
	addi $t2, $zero, 0 	# va avea nodul curent

	loop1:
	
	lw $s1, roles($t1)	# copiem in $s1 numarul curent din roles

	addi $t4, $zero, 0	# indexul (j) pentru parcurgerea lui G
	mul $t3, $t0, $t1	# obtinem indicele primului nr de pe linia i din G

	beq $s1, 3, AfisareSwitchMalitios

	continua1:
	
		loop2:
	
		bne $s1, 3, exit		# verificam daca nodul curent este un switch malitios

		lw $s2, G($t3)		# copiem in $s2 elementul de pe pozitia $t3 din G
	
		beq $s2, 1, AfisareNodAdiacent		# daca $s2 este egal cu 1 atunci afisam nodurile cu care este adiacent

		continua2:
	
		addi $t3, $t3, 4	
		addi $t4, $t4, 1
	
		blt $t4, $t0, loop2	

	exit:

	beq $s1, 3, AfisareLinieNoua
	
	continua3:
	
	addi $t1, $t1, 4
	addi $t2, $t2, 1

	blt $t2, $t0, loop1

#----------------------------------------------------------------------------------------------------

	# Sfarsitul programului 1
	li $v0, 10
	syscall
		
#-----------------------------------------------------------------------------------------------------

	AfisareNodAdiacent:
	
	mul $t5, $t4, 4
	lw $s3, roles($t5)

	beq $s3, 1, AfisareMesaj1
	beq $s3, 2, AfisareMesaj2
	beq $s3, 3, AfisareMesaj3
	beq $s3, 4, AfisareMesaj4

	exit1:

	li $v0, 1
	move $a0, $t4
	syscall

	jal AfisarePunctSiVirgula

	li $v0, 4
	la $a0, newSpace
	syscall
	
	j continua2

#-----------------------------------------------------------------------------------------------------

	AfisareSwitchMalitios:
	li $v0, 4
	la $a0, message3
	syscall
	
	li $v0, 1
	move $a0, $t2
	syscall

	jal AfisareDouaPuncte

	li $v0, 4
	la $a0, newSpace
	syscall
	
	j continua1

#------------------------------------------------------------------------------------------------------

	AfisareLinieNoua:
	li $v0, 4
	la $a0, newLine
	syscall

	j continua3

#------------------------------------------------------------------------------------------------------

	AfisareMesaj1:
	li $v0, 4
	la $a0, message1
	syscall
	j exit1
	
	AfisareMesaj2:
	li $v0, 4
	la $a0, message2
	syscall
	j exit1

	AfisareMesaj3:
	li $v0, 4
	la $a0, message3
	syscall
	j exit1

	AfisareMesaj4:
	li $v0, 4
	la $a0, message4
	syscall
	j exit1


#-------------------------------------------------------------------

	AfisarePunctSiVirgula:

	li $v0, 4
	la $a0, punctSiVirgula
	syscall
	jr $ra
	
#-------------------------------------------------------------------

	AfisareDouaPuncte:

	li $v0, 4
	la $a0, douaPuncte
	syscall
	jr $ra

#--------------------------------------------------------------------

			#PROBLEMA2

#-------------------------------------------------------------------

		PROBLEMA2:

#-------------------------------------------------------------------

	#Initializare vector vizitat si stiva

	move $t0, $a1		# numarul de noduri este pus in $t0
	addi $s5, $zero, 1	# nr 1 va fi pus la inceput in vectorul vizitat
	addi $s6, $zero, 0	# numarul 0 va fi pus in matrice in cazul nodurilor parcurse
	addi $t1, $zero, 0
	addi $t2, $zero, 0

	loopVizitat:
	
	sw $s6, stiva($t1)
	sw $s5, vizitat($t1)

	addi $t1, $t1, 4
	addi $t2, $t2, 1

	blt $t2, $t0, loopVizitat

	addi $t1, $zero, 0

	sw $s6, vizitat($t1)

#--------------------------------------------------------------------

	
	
	addi $t1, $zero, 0	# va merge din 4 in 4 bytes pentru stiva reprezentand pozitia ultimului nod ce trebuie parcurs
	addi $t2, $zero, 0 	# va avea nr de noduri din stiva
	addi $t5, $zero, 0 	# va merge din 4 in 4 bytes pt stiva reprezentand nodurile ce trebuie parcurse
	addi $t6, $zero, 0 	# va fi nodul curent pe care se aplica BFS
	
	# BFS punand nodurile parcurse in vectorul stiva

	sw $t6, stiva($t1)	# punem primul nod in stiva
	addi $t5, $t5, 4	# trecem pe pozitia urmatoare pt adaugare
	addi $t2, $t2, 1 	# crestem contorul stivei
	addi $t1, $t1, 4	# trecem pe poz urm pt parcurgere

	loop1.2:

	addi $t4, $zero, 0	# indexul (j) pentru parcurgerea lui G

	# Obtinerea liniei din parcurgerea BFS
	mul $t3, $t6, 4
	mul $t3, $t3, $t0	# obtinem indicele primului nr de pe linia $t1 din G
	
		loop2.2:

		lw $s1, G($t3)			# copiem in $s1 elementul de pe pozitia $t3 din G
	
		beq $s1, 1, TestAdaugareStiva		# daca $s1 este egal cu 1 atunci afisam nodurile cu care este adiacent

		continua1.2:
	
		addi $t3, $t3, 4	
		addi $t4, $t4, 1
	
		blt $t4, $t0, loop2.2

	lw $t6, stiva($t1)
	
	addi $t1, $t1, 4

	bne $t6, $s6, loop1.2

#-----------------------------------------------------------------------------------

	#Afisarea hosturilor

	addi $t1, $zero, 0
	addi $t3, $zero, 0
	addi $t4, $zero, 0
	addi $s1, $zero, 0
	addi $s2, $zero, 0

	
	while1:

	lw $s1, stiva($t1)

	mul $s2, $s1, 4

	lw $s2, roles($s2)

	beq $s2, $s5, AfisareHost

	continuaAfisareHost:
	
	addi $t1, $t1, 4
	addi $t3, $t3, 1
	
	blt $t3, $t2, while1

	li $v0, 4
	la $a0, newLine
	syscall

#------------------------------------------------------------------------------------

	#Afisare Yes/No

	beq $t2, $t0, AfisareYes
	bne $t2, $t0, AfisareNo

	continuareYesNo:

#------------------------------------------------------------------------------------

	#Sfarsitul programului	
	li $v0, 10
	syscall

#------------------------------------------------------------------------------------

	TestAdaugareStiva:

	mul $s4, $t4, 4

	lw $s3, vizitat($s4)

	beq $s3, $s5, AdaugareStiva

	j continua1.2

		AdaugareStiva:
	
		sw $t4, stiva($t5)
		addi $t5, $t5, 4	# trecem pe pozitia urmatoare
		addi $t2, $t2, 1	# crestem contorul stivei

		# Stergerea adiacentelor din matrice

		sw $s6, G($t3)

		#Unde se va pune valoarea 1 pe prima jumatate a matricei  G = 4 * $t0 * $t4 + 4 * $t6

		mul $s1, $t0, 4
		mul $s1, $s1, $t4
		mul $s2, $t6, 4
		add $s1, $s1, $s2

		sw $s6, G($s1)

		sw $s6, vizitat($s4)
	
		j continua1.2

#-------------------------------------------------------------------------------------

	AfisareHost:

	li $v0, 4
	la $a0, message1
	syscall
	
	li $v0, 1
	move $a0, $s1
	syscall

	li $v0, 4
	la $a0, punctSiVirgula
	syscall

	li $v0, 4
	la $a0, newSpace
	syscall
	
	j continuaAfisareHost

#---------------------------------------------------------------------------------------

	AfisareYes:

	li $v0, 4
	la $a0, YES
	syscall
	j continuareYesNo

#---------------------------------------------------------------------------------------

	AfisareNo:

	li $v0, 4
	la $a0, NO
	syscall
	j continuareYesNo

#----------------------------------------------------------------------------------------

			#PROBLEMA3

#----------------------------------------------------------------------------------------

	PROBLEMA3:

#----------------------------------------------------------------------------------------

	#Citirea specifica cerintei 3

#----------------------------------------------------------------------------------------

	#Citirea celor 2 hosturi

	li $v0, 5
	syscall
	
	move $s0, $v0
	sw $s0, Host1

	li $v0, 5
	syscall
	
	move $s1, $v0
	sw $s1, Host2

	addi $s1, $zero, 0
	addi $s2, $zero, 0

#-----------------------------------------------------------------------------------------
	
	#Citirea mesajului de output

	li $v0, 8
	la $a0, userInput
	syscall

#-----------------------------------------------------------------------------------------

	#Parcurgerea BFS si crearea stivei

#-----------------------------------------------------------------------------------------

	#Initializare vector vizitat si stiva

	move $t0, $a1		# numarul de noduri este pus in $t0
	addi $s5, $zero, 1	# nr 1 va fi pus la inceput in vectorul vizitat
	addi $s6, $zero, 0	# numarul 0 va fi pus in matrice in cazul nodurilor parcurse
	addi $t1, $zero, 0
	addi $t2, $zero, 0

	loopVizitat1:
	
	sw $s6, stiva($t1)
	sw $s5, vizitat($t1)

	addi $t1, $t1, 4
	addi $t2, $t2, 1

	blt $t2, $t0, loopVizitat1

	addi $t1, $zero, 0

	sw $s6, vizitat($t1)

#--------------------------------------------------------------------

	
	
	addi $t1, $zero, 0	# va merge din 4 in 4 bytes pentru stiva reprezentand pozitia ultimului nod ce trebuie parcurs
	addi $t2, $zero, 0 	# va avea nr de noduri din stiva
	addi $t5, $zero, 0 	# va merge din 4 in 4 bytes pt stiva reprezentand nodurile ce trebuie parcurse
	addi $t6, $zero, 0 	# va fi nodul curent pe care se aplica BFS
	
	# BFS punand nodurile parcurse in vectorul stiva

	sw $t6, stiva($t1)	# punem primul nod in stiva
	addi $t5, $t5, 4	# trecem pe pozitia urmatoare pt adaugare
	addi $t2, $t2, 1 	# crestem contorul stivei
	addi $t1, $t1, 4	# trecem pe poz urm pt parcurgere

	LOOP1:

	addi $t4, $zero, 0	# indexul (j) pentru parcurgerea lui G

	# Obtinerea liniei din parcurgerea BFS
	mul $t3, $t6, 4
	mul $t3, $t3, $t0	# obtinem indicele primului nr de pe linia $t1 din G
	
		LOOP2:

		lw $s1, G($t3)			# copiem in $s1 elementul de pe pozitia $t3 din G
	
		beq $s1, 1, TESTADAUGARESTIVA		# daca $s1 este egal cu 1 atunci afisam nodurile cu care este adiacent

		CONTINUA1:
	
		addi $t3, $t3, 4	
		addi $t4, $t4, 1
	
		blt $t4, $t0, LOOP2

	lw $t6, stiva($t1)
	
	addi $t1, $t1, 4

	bne $t6, $s6, LOOP1

#-----------------------------------------------------------------------------------------

	#Afisare stiva

	addi $t3, $zero, 0
	addi $t4, $zero, 0
	addi $t5, $zero, 0
	addi $t6, $zero, 0

#----------------------------------------------------------------------------------------

	#Detectare switch malitios: daca $s5 = 1 inseamna ca este un switch malitios in drum
	
	addi $t1, $zero, 0
	addi $t3, $zero, 0	# va merge din 4 in 4
	addi $t4, $zero, 0
	addi $t5, $zero, 0
	addi $t6, $zero, 0
	addi $s0, $zero, 0	# elementul curent din stiva
	addi $s1, $zero, 0	# primul host
	addi $s2, $zero, 0	# al doilea host
	addi $s3, $zero, 0	# este 1 daca primul host a fost vizitat
	addi $s4, $zero, 0	# este 1 daca al doilea host a fost vizitat
	addi $s5, $zero, 0	

	lw $s1, Host1
	lw $s2, Host2

	DetectarePrimHost:
	
	lw $s0, stiva($t3)

	beq $s0, $s1, PrimaVizitare
	beq $s0, $s2, PrimaVizitare

	ContinuarePrimaVizitare:

	addi $t3, $t3, 4
	addi $t4, $t4, 1

	bne $s3, 1, DetectarePrimHost




	DetectareUltimHost:
	
	lw $s0, stiva($t3)

	beq $s0, $s1, UltimaVizitare
	beq $s0, $s2, UltimaVizitare

	ContinuareUltimaVizitare:
	
	addi $t3, $t3, 4
	addi $t4, $t4, 1

	blt $t4, $t2, DetectareUltimHost

#-----------------------------------------------------------------------------------------

	#Afisarea mesajului

	beq $s4, 1, AfisareMesajNemodificat

	ContinuaAfisareMesajNemodificat:

	beq $s4, 0, AfisareMesajModificat
	
	ContinuaAfisareMesajModificat:

#-----------------------------------------------------------------------------------------

	#Sfarsitul programului
	
	li $v0, 10
	syscall

#-----------------------------------------------------------------------------------------

	TESTADAUGARESTIVA:

	mul $s4, $t4, 4

	sw $s4, CopieS4

	lw $s3, vizitat($s4)

	beq $s3, $s5, TestNodMalitios

	j CONTINUA1

	TestNodMalitios:
	
	mul $s4, $t4, 4
	lw $s4, roles($s4)

	bne $s4, 3, ADAUGARESTIVA

	
	j CONTINUA1

		ADAUGARESTIVA:

		lw $s4, CopieS4
	
		sw $t4, stiva($t5)
		addi $t5, $t5, 4	# trecem pe pozitia urmatoare
		addi $t2, $t2, 1	# crestem contorul stivei

		# Stergerea adiacentelor din matrice

		sw $s6, G($t3)

		#Unde se va pune valoarea 1 pe prima jumatate a matricei  G = 4 * $t0 * $t4 + 4 * $t6

		mul $s1, $t0, 4
		mul $s1, $s1, $t4
		mul $s2, $t6, 4
		add $s1, $s1, $s2

		sw $s6, G($s1)

		sw $s6, vizitat($s4)
	
		j CONTINUA1

#---------------------------------------------------------------------------------------------

	PrimaVizitare:

	addi $s3, $zero, 1

	j ContinuarePrimaVizitare

#--------------------------------------------------------------------------------------------

	UltimaVizitare:

	addi $s4, $zero, 1
	
	j ContinuareUltimaVizitare

#---------------------------------------------------------------------------------------------

	AfisareMesajNemodificat:

	li $v0, 4
	la $a0, userInput
	syscall

	j ContinuaAfisareMesajNemodificat

#----------------------------------------------------------------------------------------------

	AfisareMesajModificat:

	addi $t0, $zero, 0
	addi $t1, $zero, 0
	addi $t2, $zero, 0
	addi $t3, $zero, 0
	addi $t4, $zero, 0
	addi $t5, $zero, 0
	addi $t6, $zero, 0

	LoopDeterminareLungimeSir:
	
	lb $t0, userInput($t1)

	addi $t1, $t1, 1
	
	bne $t0, 0, LoopDeterminareLungimeSir



	addi $t1, $t1, -1



	LoopAfisareMesajModificat:

	lb $t0, userInput($t2)



	addi $t3, $zero, 26
	addi $t4, $zero, 0
	addi $t5, $zero, 0
	addi $t6, $zero, 0

	LoopAlfabet:
 	
	lb $t4, PozitiiInapoi($t3)
	
	addi $t3, $t3, 1

	bne $t4, $t0, LoopAlfabet

	addi $t3, $t3, -11

	lb $t0, PozitiiInapoi($t3)



	li $v0, 11
	move $a0, $t0
	syscall
	
	addi $t2, $t2, 1

	bne $t2, $t1, LoopAfisareMesajModificat

#------------------------------------------------------------------------------------------
